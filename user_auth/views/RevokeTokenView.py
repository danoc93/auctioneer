import requests
from django.core.exceptions import SuspiciousOperation
from rest_framework.response import Response
from rest_framework.views import APIView

from settings.environment import OAUTH_CLIENT_ID, OAUTH_CLIENT_SECRET, OAUTH_TOKEN_REVOKE_URL


class RevokeTokenView(APIView):
    """
    Revoke a token generated by the internal OAuth provider.

    This endpoint extracts the required token from the provided request and thus is not public.
    """

    def post(self, request):
        token = request.META.get('HTTP_AUTHORIZATION')

        if not token:
            raise SuspiciousOperation('Token should exist in headers')

        r = requests.post(
            OAUTH_TOKEN_REVOKE_URL,
            data={
                'token': token.split(' ')[1],
                'client_id': OAUTH_CLIENT_ID,
                'client_secret': OAUTH_CLIENT_SECRET,
            },
        )

        # If it goes well return success message (would be empty otherwise)
        if r.status_code == requests.codes.ok:
            return Response({'message': 'token revoked'}, r.status_code)
        # Return the error if it goes badly
        return Response(r.json(), r.status_code)
